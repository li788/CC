class myfun 
{
public:
    int operator()(int &a,int&b) //重载（），建立仿函数；
    { 
        return a + b;
    }

};
class MyPrint
{
public:
	MyPrint()//赋初始值；
	{
		count = 0;
	}
	void operator()(string test)
	{
		cout << test << endl;
		count++; //统计使用次数
	}

	int count; //内部自己的状态
};
void test02()
{
	MyPrint myPrint;
	myPrint("hello world");
	myPrint("hello world");
	myPrint("hello world");
	cout << "myPrint调用次数为： " << myPrint.count << endl;
	//myPrint.count调用其属性
}
void test01()
{
    class myfun myfun;
    //重载仿函数，类作为仿函数的函数名；
    //然后将类当成函数进行正常的传参；
    int a = 10, b = 20;
   int c= myfun(a, b);
    cout<< c<<" ";
    cout << endl;

}
//3、函数对象可以作为参数传递
void doPrint(MyPrint& mp, string test)
{
	mp(test);
}

void test03()
{
	MyPrint myPrint;//本质还是一个类；具有和类相同的属性
	doPrint(myPrint, "Hello C++");
}

int main()
{
	test03();
	test02();
    test01();
    system("pause");
    return 0;
}